#include <msp430.h>
#include "_Grace.h"

/* USER CODE START (section: InterruptVectors_init_c_prologue) */
#include "D:\MSP_430_Workspace\Chime_Module2\main.h"

//extern volatile int run=0, buckled=0, door=0, none=0; // globals

/* USER CODE END (section: InterruptVectors_init_c_prologue) */

/*
 *  ======== InterruptVectors_graceInit ========
 */
void InterruptVectors_graceInit(void)
{
}


/* Interrupt Function Prototypes */




/*
 *  ======== PORT1 Interrupt Service Routine ========
 *
 * Here are several important notes on using PORTx interrupt Handler:
 *
 * 1. User must explicitly clear the port interrupt flag before exiting
 *
 *    PxIFG &= ~(BITy);
 *
 * 2. User could also exit from low power mode and continue with main
 *    program execution by using the following instruction before exiting
 *    this interrupt handler.
 *
 *    __bic_SR_register_on_exit(LPMx_bits);
 *
 */
#pragma vector=PORT1_VECTOR
__interrupt void PORT1_ISR_HOOK(void)
{
    /* USER CODE START (section: PORT1_ISR_HOOK) */
	run = 		(P1IN & RUN);
	buckled = 	!(P1IN & SEATBELT);
	door_or_keys = 		(P1IN & DOOR);

	none = !(run || !buckled || door_or_keys);

//	P1IFG &= ~(RUN & SEATBELT & DOOR);

	P1IFG &= ~(0xFF);
    /* USER CODE END (section: PORT1_ISR_HOOK) */
}

/*
 *  ======== Timer0_A3 Interrupt Service Routine ======== 
 */
#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR_HOOK(void)
{
    /* USER CODE START (section: TIMER0_A0_ISR_HOOK) */
	// periodic interrupt, last set to 10Hz 2016-01-23
    // This timer is used for turning on the tone to the speaker to set the pulse duration and pattern.
	static int i=1;
	int enable=0;
	P1OUT ^= BIT6;
	//enable = someint & i;	// TODO: look up enable value
	// increment i but keep in int bounds.
	__rol(i);
    /* USER CODE END (section: TIMER0_A0_ISR_HOOK) */
}
